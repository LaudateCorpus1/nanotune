{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "political-world",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:05:56.350385Z",
     "iopub.status.busy": "2021-07-27T12:05:56.349013Z",
     "iopub.status.idle": "2021-07-27T12:06:00.953719Z",
     "shell.execute_reply": "2021-07-27T12:06:00.954381Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logging hadn't been started.\n",
      "Activating auto-logging. Current session state plus future input saved.\n",
      "Filename       : /Users/jana/.qcodes/logs/command_history.log\n",
      "Mode           : append\n",
      "Output logging : True\n",
      "Raw input log  : False\n",
      "Timestamping   : True\n",
      "State          : active\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Qcodes Logfile : /Users/jana/.qcodes/logs/210727-9450-qcodes.log\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import qcodes as qc\n",
    "import nanotune as nt\n",
    "from nanotune.fit.pinchofffit import PinchoffFit\n",
    "from nanotune.tests.data_generator_methods import populate_db_pinchoffs\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "geographic-wonder",
   "metadata": {},
   "source": [
    "Set up a database with synthetic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "realistic-fiction",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:06:00.965662Z",
     "iopub.status.busy": "2021-07-27T12:06:00.963664Z",
     "iopub.status.idle": "2021-07-27T12:06:01.482783Z",
     "shell.execute_reply": "2021-07-27T12:06:01.482088Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 161. \n",
      "Starting experimental run with id: 162. \n",
      "Starting experimental run with id: 163. \n",
      "Starting experimental run with id: 164. \n",
      "Starting experimental run with id: 165. \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 166. \n",
      "Starting experimental run with id: 167. \n",
      "Starting experimental run with id: 168. \n",
      "Starting experimental run with id: 169. \n",
      "Starting experimental run with id: 170. \n"
     ]
    }
   ],
   "source": [
    "db_name = 'temp_po.db'\n",
    "db_folder = os.getcwd()\n",
    "if not os.path.isfile(os.path.join(db_name, db_folder)):\n",
    "    nt.new_database('temp_po.db', db_folder)\n",
    "    e = qc.new_experiment(\"pinchoff_demo\", sample_name=\"mock_pinchoff\")\n",
    "    populate_db_pinchoffs()\n",
    "\n",
    "nt.set_database(db_name, db_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "private-transport",
   "metadata": {},
   "source": [
    "### Initialize a PinchoffFit\n",
    "\n",
    "It takes a QCoDeS run id (int), the name of the database where the data is stored and optionally the folder where the the database is stored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "premier-looking",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:06:01.488202Z",
     "iopub.status.busy": "2021-07-27T12:06:01.487416Z",
     "iopub.status.idle": "2021-07-27T12:06:01.881953Z",
     "shell.execute_reply": "2021-07-27T12:06:01.882919Z"
    }
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'dc_current'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-ae3a4cfa289d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPinchoffFit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdb_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdb_folder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdb_folder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/Documents/code/nanotune/nanotune/nanotune/fit/pinchofffit.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, run_id, db_name, db_folder, gradient_percentile, get_transition_from_fit, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0mdb_folder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"db_folder\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m         DataFit.__init__(\n\u001b[0m\u001b[1;32m     66\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mrun_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/code/nanotune/nanotune/nanotune/fit/datafit.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, qc_run_id, db_name, db_folder, **kwargs)\u001b[0m\n\u001b[1;32m     31\u001b[0m             \u001b[0mdb_folder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"db_folder\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         Dataset.__init__(\n\u001b[0m\u001b[1;32m     34\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0mqc_run_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/code/nanotune/nanotune/nanotune/data/dataset.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, qc_run_id, db_name, db_folder, normalization_tolerances)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfiltered_data\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mxr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_qcodes_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_filtered_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_power_spectrum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/code/nanotune/nanotune/nanotune/data/dataset.py\u001b[0m in \u001b[0;36mfrom_qcodes_dataset\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    133\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_load_metadata_from_qcodes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mqc_dataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_prep_qcodes_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_load_metadata_from_qcodes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mqc_dataset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDataSet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/code/nanotune/nanotune/nanotune/data/dataset.py\u001b[0m in \u001b[0;36m_prep_qcodes_data\u001b[0;34m(self, rename)\u001b[0m\n\u001b[1;32m    210\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mr_meth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_param\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadout_methods\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    211\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdimensions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr_meth\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr_param\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 212\u001b[0;31m             \u001b[0mnrm_dt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_normalize_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr_param\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_meth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    213\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr_meth\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnrm_dt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/code/nanotune/nanotune/nanotune/data/dataset.py\u001b[0m in \u001b[0;36m_normalize_data\u001b[0;34m(self, signal, signal_type)\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_normalize_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msignal\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msignal_type\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m         \u001b[0;34m\"\"\"\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 238\u001b[0;31m         \u001b[0mminv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalization_constants\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msignal_type\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    239\u001b[0m         \u001b[0mmaxv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalization_constants\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msignal_type\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'dc_current'"
     ]
    }
   ],
   "source": [
    "pf = PinchoffFit(1, db_name, db_folder=db_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "million-proxy",
   "metadata": {},
   "source": [
    "### Fitting procedure\n",
    "Specifically, `find_fit` uses the following methods to extract the desired features: \n",
    "- `compute_initial_guess`: Computes bounds and an initial guess for amplitude, slope and offset of the hyperbolic tangent the pinchoff curve is fitted to.\n",
    "- `fit_fct` and `scipy.optimize.least_squares`: Optimize for *a*, *b*, *c* in  *fit_fct = a (1 + np.tanh(b  v + c))*.\n",
    "- `compute_transition_interval`: Determine low and hig voltages: the voltages between which a gate pinches off. Per default, the method takes the first derivate of either the normalized signal or fit and checks for which voltages it is higher than `gradient_percentile`. These voltages define the transition interval. Using this gradient strength comparison allows capture the entire interval. Compared to using for example the second derivate, the voltage interval will also include voltages where the signal reaches zero or saturation. It also provides a knob to increase or decrease the interval by changing `gradient_percentile` if required.\n",
    "- `compute_transition_voltage`: The transition is defined to occur at the maximum of the first derivative of either the normalized signal or the fit.\n",
    "- `save_features`: Method defined in the class DataFit which PinchoffFit inherits from and which saves all features into a single dict."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "standing-mailman",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:06:01.888468Z",
     "iopub.status.busy": "2021-07-27T12:06:01.887548Z",
     "iopub.status.idle": "2021-07-27T12:06:01.898334Z",
     "shell.execute_reply": "2021-07-27T12:06:01.899165Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-6d0581970e23>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'pf' is not defined"
     ]
    }
   ],
   "source": [
    "pf.find_fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "color-southwest",
   "metadata": {},
   "source": [
    "### Features\n",
    "Features are extracted with the `find_fit` method and saved in the `features` attribute. Each trace (e.g. different readout sources) are fitted seperately. The readout methods used in the synthetic data example are `transport` and `sensing`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "outer-november",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:06:01.904853Z",
     "iopub.status.busy": "2021-07-27T12:06:01.903638Z",
     "iopub.status.idle": "2021-07-27T12:06:01.915893Z",
     "shell.execute_reply": "2021-07-27T12:06:01.916491Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-d971923a6bc3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'pf' is not defined"
     ]
    }
   ],
   "source": [
    "pf.features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "lightweight-spiritual",
   "metadata": {},
   "source": [
    "### Visualization\n",
    "\n",
    "PinchoffFit has two methods to visualize the data and fitting features: \n",
    "- `plot_fit`: Shows the normalized trace together with its smoothed version, gradient and fit. It also indicated high, low and transition voltage found during fitting. \n",
    "- `plot_features`: Illustrates some of the features extracted during fitting and used for classification. Note that while high, low and transition voltage is required for further tuning, whereas high, low and transition current/signal is decisive for the measurement's quality. It does not matter where in voltage space a gate pinches off, but whether a gate is able to pinch off entirely for example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "endangered-stock",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:06:01.921514Z",
     "iopub.status.busy": "2021-07-27T12:06:01.920640Z",
     "iopub.status.idle": "2021-07-27T12:06:01.931245Z",
     "shell.execute_reply": "2021-07-27T12:06:01.931839Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-46c28f85f5e3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'pf' is not defined"
     ]
    }
   ],
   "source": [
    "pf.plot_fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "operational-triangle",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-27T12:06:01.936754Z",
     "iopub.status.busy": "2021-07-27T12:06:01.935929Z",
     "iopub.status.idle": "2021-07-27T12:06:01.946291Z",
     "shell.execute_reply": "2021-07-27T12:06:01.945622Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-479556905d9d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'pf' is not defined"
     ]
    }
   ],
   "source": [
    "pf.plot_features()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "institutional-fireplace",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "average-answer",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "broke-preference",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "wireless-subsection",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
